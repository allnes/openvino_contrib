resources:
  repositories:
  - repository: openvino
    type: github
    endpoint: openvinotoolkit
    name: openvinotoolkit/openvino

jobs:
- job: android_arm64
  # About 150% of total time
  timeoutInMinutes: 120

  pool:
    name: LIN_VMSS_VENV_F16S_U20_WU2

  variables:
    system.debug: true
    VSTS_HTTP_RETRY: 5
    VSTS_HTTP_TIMEOUT: 200
    BUILD_TYPE: Release
    REPO_DIR: $(Build.Repository.LocalPath)
    OPENVINO_REPO_DIR: $(REPO_DIR)/../openvino
    WORK_DIR: $(Pipeline.Workspace)/_w
    BUILD_DIR: $(WORK_DIR)/build
    INSTALL_DIR: $(WORK_DIR)/install
    ANDROID_TOOLS: $(WORK_DIR)/android_tools
    ANDROID_SDK_VERSION: 29
    ANDROID_ABI_CONFIG: arm64-v8a
    TMP_DIR: /mnt/tmp
    SHARE_DIR: /mount/cinfsshare/onnxtestdata
    CCACHE_DIR: $(SHARE_DIR)/ccache/master/ov_contrib_android_arm64
    NUM_PROC: 1

  steps:
  - script: |
      curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
      whoami
      uname -a
      echo Python3 info ; which python3 ; python3 --version
      echo Python info ; which python ; python --version
      echo Java info ; which java ; java -version
      echo gcc info ; which gcc ; gcc --version
      echo cmake info ; which cmake ; cmake --version
      lsb_release
      env
      cat /proc/cpuinfo
      cat /proc/meminfo
      cat /etc/fstab
      vmstat -s
      df
      lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
      free -h
      echo "##vso[task.setvariable variable=NUM_PROC]$(nproc --all)"
      echo "NUM_PROC=$(NUM_PROC)"
    displayName: 'System information'

  - script: |
      rm -rf $(WORK_DIR)         ; mkdir $(WORK_DIR)
      rm -rf $(BUILD_DIR)        ; mkdir $(BUILD_DIR)
      rm -rf $(INSTALL_DIR)      ; mkdir $(INSTALL_DIR)
      rm -rf $(ANDROID_TOOLS)    ; mkdir $(ANDROID_TOOLS)
      sudo rm -rf $(TMP_DIR) ; sudo mkdir $(TMP_DIR) ; sudo chmod 777 -R $(TMP_DIR)
      sudo mkdir -p $(SHARE_DIR)
      sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
      sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata $(SHARE_DIR) -o vers=4,minorversion=1,sec=sys
      mkdir -p $(CCACHE_DIR)
    displayName: 'Make dir'

  - checkout: self
    clean: true
    lfs: false
    submodules: recursive
    path: openvino_contrib

  - checkout: openvino
    clean: true
    lfs: false
    submodules: recursive
    path: openvino

  - script: |
      set -e
      $(OPENVINO_REPO_DIR)/install_build_dependencies.sh
      # Move into contrib install_build_dependencies.sh
      sudo apt --assume-yes install scons crossbuild-essential-arm64 libprotoc-dev libhiredis-dev
      sudo apt --assume-yes install protobuf-compiler default-jdk libssl-dev zip libzstd-dev
      # Install cmake for Android
      wget https://github.com/Kitware/CMake/releases/download/v3.22.1/cmake-3.22.1.tar.gz
      tar -xzf cmake-3.22.1.tar.gz
      cd cmake-3.22.1 
      ./bootstrap --parallel=$(NUM_PROC)
      make --jobs=$(NUM_PROC) 
      sudo make install
      rm -rf cmake-3.22.1 cmake-3.22.1.tar.gz
      # Speed up build
      wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
      unzip ninja-linux.zip
      sudo cp -v ninja /usr/local/bin/
      # Install ccache for Android
      wget https://github.com/ccache/ccache/releases/download/v4.5.1/ccache-4.5.1.tar.gz
      tar -xzf ccache-4.5.1.tar.gz
      cd ccache-4.5.1
      mkdir build && cd build
      cmake -GNinja -DCMAKE_BUILD_TYPE=Release ..
      ninja
      sudo ninja install
      # Install Android SDK, NDK and TOOLS
      wget https://dl.google.com/android/repository/commandlinetools-linux-7583922_latest.zip
      unzip commandlinetools-linux-7583922_latest.zip
      yes | ./cmdline-tools/bin/sdkmanager --sdk_root=$(ANDROID_TOOLS) --licenses
      ./cmdline-tools/bin/sdkmanager --sdk_root=$(ANDROID_TOOLS) --install "ndk-bundle" "platform-tools" "platforms;android-$(ANDROID_SDK_VERSION)"
    workingDirectory: $(WORK_DIR)
    displayName: 'Install dependencies'

  - task: CMake@1
    inputs:
      cmakeArgs: >
      -GNinja
      -DCMAKE_SYSTEM_NAME=Android
      -DCMAKE_SYSTEM_VERSION=29
      -DCMAKE_ANDROID_ARCH_ABI=arm64-v8a
      -DCMAKE_ANDROID_NDK=$(ANDROID_TOOLS)/ndk-bundle
      -DCMAKE_ANDROID_STL_TYPE=c++_shared
      -DCMAKE_CXX_COMPILER_LAUNCHER=/usr/local/bin/ccache
      -DCMAKE_C_COMPILER_LAUNCHER=/usr/local/bin/ccache
      -DVERBOSE_BUILD=ON
      -DCMAKE_BUILD_TYPE=$(BUILD_TYPE)
      -DENABLE_OPENCV=OFF
      -DENABLE_TESTS=ON
      -DENABLE_SAMPLES=ON
      -DENABLE_INTEL_MYRIAD=OFF
      -DBUILD_java_api=ON
      -DTHREADING=SEQ
      -DIE_EXTRA_MODULES=$(REPO_DIR)/modules
      -DARM_COMPUTE_SCONS_JOBS=$(NUM_PROC)
      -DCMAKE_INSTALL_PREFIX=$(INSTALL_DIR)
      $(OPENVINO_REPO_DIR)
    workingDirectory: $(BUILD_DIR)

  - script: /usr/local/bin/ccache --zero-stats --max-size=50G --show-config
    displayName: 'Clean ccache stats'

  - script: |
      export CCACHE_DIR=$(CCACHE_DIR)
      export CCACHE_TEMPDIR=$(TMP_DIR)/ccache
      export CCACHE_BASEDIR=$(Pipeline.Workspace)
      export CCACHE_MAXSIZE=50G
      export USE_CCACHE=1
      export NDK_CCACHE=/usr/local/bin/ccache
      export CCACHE_EXEC=/usr/local/bin/ccache
      export CCACHE_CPP2=1
      ninja
    workingDirectory: $(BUILD_DIR)
    displayName: 'Build Android ARM plugin'

  - script: /usr/local/bin/ccache --show-stats
    displayName: 'Show ccache stats'

  - script: ninja install
    workingDirectory: $(BUILD_DIR)
    displayName: 'Install OpenVINO ARM plugin'

  - script: |
      zip -r $(INSTALL_DIR)/openvino_install_files.zip $(INSTALL_DIR)
      ls -alR $(INSTALL_DIR)
    displayName: 'List & Zip install files'

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: '$(INSTALL_DIR)/openvino_install_files.zip'
      artifactName: openvino_arm_install
    displayName: 'Publish install archive'
