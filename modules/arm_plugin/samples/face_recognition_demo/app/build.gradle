plugins {
    id 'com.android.application'
}

android {
    compileSdk 31

    defaultConfig {
        applicationId "com.openvino_demo.face_recognition_demo"
        minSdk 23
        targetSdk 31
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'com.google.android.material:material:1.4.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.1'
    implementation files('libs/openvino/inference_engine_java_api.jar')
    implementation project(path: ':ocv')
    testImplementation 'junit:junit:'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'
    implementation "androidx.camera:camera-camera2:1.0.2"
    implementation "androidx.camera:camera-lifecycle:1.0.2"
    implementation "androidx.camera:camera-view:1.0.0-alpha30"
    implementation 'com.google.googlejavaformat:google-java-format:1.11.0'
}

Properties localProperties = new Properties()
if (project.rootProject.file('local.properties').canRead()) {
    localProperties.load(new FileInputStream(rootProject.file("local.properties")))
}

task createLibsDir() {
    mkdir "$projectDir/src/main/jniLibs/"
    mkdir "$projectDir/src/main/jniLibs/$ARM_PROCESSOR_CONFIGURATION/"
    mkdir "$projectDir/libs/openvino/"
    mkdir "$projectDir/libs/openvino/"
}
preBuild.dependsOn(createLibsDir)

task copyOPVLibs(type: Copy) {
    from ("$OPENVINO_ARM_LIBRARY_PATH/") { include '**/*.so' }
    into "$projectDir/src/main/jniLibs/$ARM_PROCESSOR_CONFIGURATION/"
}
preBuild.dependsOn(copyOPVLibs)

task copyAndroidLib(type: Copy) {
    from "${localProperties['ANDROID_NDK_LIBRARY_PATH']}/sources/cxx-stl/llvm-libc++/libs/$ARM_PROCESSOR_CONFIGURATION/libc++_shared.so"
    into "$projectDir/src/main/jniLibs/$ARM_PROCESSOR_CONFIGURATION/"
}
preBuild.dependsOn(copyAndroidLib)

task copyOPVJarFiles(type: Copy) {
    from("$OPENVINO_ARM_LIBRARY_PATH/") { include '**/*.jar' }
    into "$projectDir/libs/openvino/"
}
preBuild.dependsOn(copyOPVJarFiles)

task copyOMZNetworks(type: Copy) {
    from("$OMZ_NETWORKS_PATH/") { include '**/*.xml', '**/*.bin' }
    into "$projectDir/src/main/assets/"
}
preBuild.dependsOn(copyOMZNetworks)

task copyPluginXML(type: Copy) {
    from("$OPENVINO_ARM_LIBRARY_PATH/") { include '**/*.xml' }
    into "$projectDir/src/main/assets/"
}
preBuild.dependsOn(copyPluginXML)

task printEnvVar() {
    println "ANDROID_NDK_LIBRARY_PATH = ${localProperties['ANDROID_NDK_LIBRARY_PATH']}/"
    println "ARM_PROCESSOR_CONFIGURATION = $ARM_PROCESSOR_CONFIGURATION"
    println "OMZ_NETWORKS_PATH = $OMZ_NETWORKS_PATH/"
    println "OPENVINO_ARM_LIBRARY_PATH = $OPENVINO_ARM_LIBRARY_PATH/"
    println "OPENCV_SDK_PATH = $OPENCV_SDK_PATH/"
}
preBuild.dependsOn(printEnvVar)